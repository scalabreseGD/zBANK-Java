package com.zbank.service;import com.zbank.entity.Account;import com.zbank.entity.Transaction;import com.zbank.repository.TransactionRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.time.LocalDateTime;@Servicepublic class TransactionService {    @Autowired    private TransactionRepository transactionRepository;    @Autowired    private AccountService accountService;    @Transactional    public Transaction deposit(Account account, BigDecimal amount, String description) {        if (amount.compareTo(BigDecimal.ZERO) <= 0) {            throw new IllegalArgumentException("Deposit amount must be positive");        }        accountService.updateAccountBalance(account, amount);        Transaction transaction = new Transaction();        transaction.setSourceAccount(account);        transaction.setAmount(amount);        transaction.setType("DEPOSIT");        transaction.setTimestamp(LocalDateTime.now());        transaction.setDescription(description);        return transactionRepository.save(transaction);    }    @Transactional    public Transaction withdraw(Account account, BigDecimal amount, String description) {        if (amount.compareTo(BigDecimal.ZERO) <= 0) {            throw new IllegalArgumentException("Withdrawal amount must be positive");        }        if (account.getBalance().compareTo(amount) < 0) {            throw new RuntimeException("Insufficient funds");        }        accountService.updateAccountBalance(account, amount.negate());        Transaction transaction = new Transaction();        transaction.setSourceAccount(account);        transaction.setAmount(amount);        transaction.setType("WITHDRAWAL");        transaction.setTimestamp(LocalDateTime.now());        transaction.setDescription(description);        return transactionRepository.save(transaction);    }    @Transactional    public Transaction transfer(Account sourceAccount, Account targetAccount, BigDecimal amount, String description) {        if (amount.compareTo(BigDecimal.ZERO) <= 0) {            throw new IllegalArgumentException("Transfer amount must be positive");        }        if (sourceAccount.getBalance().compareTo(amount) < 0) {            throw new RuntimeException("Insufficient funds for transfer");        }        accountService.updateAccountBalance(sourceAccount, amount.negate());        accountService.updateAccountBalance(targetAccount, amount);        Transaction transaction = new Transaction();        transaction.setSourceAccount(sourceAccount);        transaction.setTargetAccount(targetAccount);        transaction.setAmount(amount);        transaction.setType("TRANSFER");        transaction.setTimestamp(LocalDateTime.now());        transaction.setDescription(description);        return transactionRepository.save(transaction);    }}