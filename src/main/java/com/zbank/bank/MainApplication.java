package com.zbank.bank;import com.zbank.bank.models.Account;import com.zbank.bank.models.User;import com.zbank.bank.services.AccountService;import com.zbank.bank.services.AuthService;import java.util.Optional;public class MainApplication {    public static void main(String[] args) {        AuthService authService = new AuthService();        AccountService accountService = new AccountService();        // 1. User Registration        System.out.println("
--- User Registration ---");        User user1 = authService.register("john.doe", "password123", "John Doe");        User user2 = authService.register("jane.smith", "securepass", "Jane Smith");        if (user1 != null) {            System.out.println("Registered user: " + user1.getUsername());        }        if (user2 != null) {            System.out.println("Registered user: " + user2.getUsername());        }        // Try to register with existing username        User user3 = authService.register("john.doe", "anotherpass", "John D.");        if (user3 == null) {            System.out.println("Registration failed for existing user 'john.doe'. (Expected)");        }        // 2. User Login        System.out.println("
--- User Login ---");        Optional<User> loggedInUser1 = authService.login("john.doe", "password123");        if (loggedInUser1.isPresent()) {            System.out.println("Login successful for: " + loggedInUser1.get().getUsername());        } else {            System.out.println("Login failed for john.doe.");        }        Optional<User> loggedInUser2 = authService.login("jane.smith", "wrongpass");        if (loggedInUser2.isPresent()) {            System.out.println("Login successful for: " + loggedInUser2.get().getUsername());        } else {            System.out.println("Login failed for jane.smith with wrong password. (Expected)");        }        // 3. Account Creation        System.out.println("
--- Account Creation ---");        if (loggedInUser1.isPresent()) {            Account acc1 = accountService.createAccount(loggedInUser1.get().getId(), "Checking");            if (acc1 != null) {                System.out.println("Account created for " + loggedInUser1.get().getUsername() + ": " + acc1.getAccountNumber());            }        }        // 4. Deposit        System.out.println("
--- Deposit ---");        if (loggedInUser1.isPresent()) {            Optional<Account> user1Account = accountService.getAccountByUserId(loggedInUser1.get().getId());            if (user1Account.isPresent()) {                System.out.println("Initial balance for " + user1Account.get().getAccountNumber() + ": " + user1Account.get().getBalance());                accountService.deposit(user1Account.get().getAccountNumber(), 500.0);                System.out.println("Balance after deposit: " + user1Account.get().getBalance());            }        }        // 5. Withdrawal        System.out.println("
--- Withdrawal ---");        if (loggedInUser1.isPresent()) {            Optional<Account> user1Account = accountService.getAccountByUserId(loggedInUser1.get().getId());            if (user1Account.isPresent()) {                System.out.println("Balance before withdrawal: " + user1Account.get().getBalance());                accountService.withdraw(user1Account.get().getAccountNumber(), 150.0);                System.out.println("Balance after withdrawal: " + user1Account.get().getBalance());                // Try to overdraw                accountService.withdraw(user1Account.get().getAccountNumber(), 1000.0);                System.out.println("Balance after attempted overdraw: " + user1Account.get().getBalance());            }        }        // 6. Transfer        System.out.println("
--- Transfer ---");        if (loggedInUser1.isPresent() && loggedInUser2.isPresent()) {            Optional<Account> user1Account = accountService.getAccountByUserId(loggedInUser1.get().getId());            Optional<Account> user2Account = accountService.getAccountByUserId(user2.getId());            if (user1Account.isPresent() && user2Account.isPresent()) {                System.out.println("User1 Account (" + user1Account.get().getAccountNumber() + ") balance before transfer: " + user1Account.get().getBalance());                System.out.println("User2 Account (" + user2Account.get().getAccountNumber() + ") balance before transfer: " + user2Account.get().getBalance());                accountService.transfer(user1Account.get().getAccountNumber(), user2Account.get().getAccountNumber(), 100.0);                System.out.println("User1 Account balance after transfer: " + user1Account.get().getBalance());                System.out.println("User2 Account balance after transfer: " + user2Account.get().getBalance());                // Try to transfer more than available                accountService.transfer(user1Account.get().getAccountNumber(), user2Account.get().getAccountNumber(), 5000.0);                System.out.println("User1 Account balance after failed transfer: " + user1Account.get().getBalance());            }        }    }}        